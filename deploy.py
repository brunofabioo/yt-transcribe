"""
Script de Deploy - YouTube Video Transcriber
===========================================

Script para configurar e preparar o ambiente para deploy.
"""

import subprocess
import sys
import os
from pathlib import Path


def verificar_python():
    """Verifica se o Python est√° instalado"""
    print("üêç Verificando Python...")
    
    if sys.version_info < (3, 8):
        print("‚ùå Python 3.8+ √© necess√°rio!")
        print(f"Vers√£o atual: {sys.version}")
        return False
    
    print(f"‚úÖ Python {sys.version.split()[0]} detectado!")
    return True


def instalar_dependencias():
    """Instala as depend√™ncias necess√°rias"""
    print("\nüì¶ Instalando depend√™ncias...")
    
    try:
        subprocess.check_call([
            sys.executable, "-m", "pip", "install", "-r", "requirements.txt"
        ])
        print("‚úÖ Depend√™ncias instaladas com sucesso!")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå Erro ao instalar depend√™ncias: {e}")
        return False


def verificar_ffmpeg():
    """Verifica se o FFmpeg est√° dispon√≠vel"""
    print("\nüîç Verificando FFmpeg...")
    
    # Verificar se ffmpeg.exe est√° no diret√≥rio atual
    if os.path.exists("ffmpeg.exe"):
        print("‚úÖ FFmpeg encontrado no diret√≥rio atual!")
        return True
    
    # Verificar se ffmpeg est√° no PATH
    try:
        subprocess.run(["ffmpeg", "-version"], capture_output=True, check=True)
        print("‚úÖ FFmpeg encontrado no PATH!")
        return True
    except (subprocess.CalledProcessError, FileNotFoundError):
        print("‚ö†Ô∏è FFmpeg n√£o encontrado!")
        print("üì• Baixando FFmpeg...")
        return baixar_ffmpeg()


def baixar_ffmpeg():
    """Baixa o FFmpeg se necess√°rio"""
    try:
        import requests
        import zipfile
        
        # URL do FFmpeg para Windows
        url = "https://github.com/BtbN/FFmpeg-Builds/releases/download/latest/ffmpeg-master-latest-win64-gpl.zip"
        
        print("üì• Baixando FFmpeg...")
        response = requests.get(url, stream=True)
        
        with open("ffmpeg.zip", "wb") as f:
            for chunk in response.iter_content(chunk_size=8192):
                f.write(chunk)
        
        print("üì¶ Extraindo FFmpeg...")
        with zipfile.ZipFile("ffmpeg.zip", 'r') as zip_ref:
            zip_ref.extractall(".")
        
        # Mover ffmpeg.exe para o diret√≥rio atual
        for root, dirs, files in os.walk("."):
            if "ffmpeg.exe" in files:
                os.rename(os.path.join(root, "ffmpeg.exe"), "ffmpeg.exe")
                break
        
        # Limpar arquivos tempor√°rios
        os.remove("ffmpeg.zip")
        
        print("‚úÖ FFmpeg instalado com sucesso!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao baixar FFmpeg: {e}")
        print("üí° Instale o FFmpeg manualmente: https://ffmpeg.org/download.html")
        return False


def configurar_ambiente():
    """Configura o ambiente de desenvolvimento"""
    print("\n‚öôÔ∏è Configurando ambiente...")
    
    # Criar arquivo .env se n√£o existir
    env_file = Path(".env")
    if not env_file.exists():
        print("üìù Criando arquivo .env...")
        with open(env_file, "w") as f:
            f.write("# YouTube Video Transcriber & Summarizer\n")
            f.write("OPENAI_API_KEY=your_openai_api_key_here\n")
            f.write("WHISPER_MODEL_SIZE=base\n")
            f.write("LANGUAGE=pt\n")
        print("‚úÖ Arquivo .env criado!")
        print("‚ö†Ô∏è Configure sua chave da API OpenAI no arquivo .env")
    
    # Criar diret√≥rio para resultados
    results_dir = Path("resultados")
    results_dir.mkdir(exist_ok=True)
    print("üìÅ Diret√≥rio 'resultados' criado!")


def testar_instalacao():
    """Testa se a instala√ß√£o est√° funcionando"""
    print("\nüß™ Testando instala√ß√£o...")
    
    try:
        from youtube_transcriber import YouTubeTranscriber
        print("‚úÖ YouTubeTranscriber importado com sucesso")
        
        # Teste b√°sico (sem chave da API)
        try:
            transcriber = YouTubeTranscriber(openai_api_key="test")
            print("‚úÖ YouTubeTranscriber inicializado com sucesso")
        except ValueError:
            print("‚úÖ YouTubeTranscriber validando chave da API corretamente")
        
        return True
        
    except Exception as e:
        print(f"‚ùå Erro no teste: {e}")
        return False


def main():
    """Fun√ß√£o principal de deploy"""
    print("üöÄ Deploy - YouTube Video Transcriber")
    print("=" * 50)
    
    # Verificar Python
    if not verificar_python():
        return False
    
    # Instalar depend√™ncias
    if not instalar_dependencias():
        print("\n‚ùå Falha na instala√ß√£o das depend√™ncias!")
        return False
    
    # Verificar FFmpeg
    ffmpeg_ok = verificar_ffmpeg()
    
    # Configurar ambiente
    configurar_ambiente()
    
    # Testar instala√ß√£o
    if not testar_instalacao():
        print("\n‚ùå Falha no teste da instala√ß√£o!")
        return False
    
    print("\nüéâ Deploy conclu√≠do com sucesso!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Configure sua chave da API OpenAI no arquivo .env")
    print("2. Execute: python app.py")
    print("3. Ou execute: python youtube_transcriber.py")
    
    if not ffmpeg_ok:
        print("\n‚ö†Ô∏è ATEN√á√ÉO: FFmpeg n√£o est√° dispon√≠vel!")
        print("   Algumas funcionalidades podem n√£o funcionar.")
        print("   Instale o FFmpeg manualmente se necess√°rio.")
    
    print("\nüîë Para obter sua chave da API OpenAI:")
    print("   https://platform.openai.com/api-keys")
    
    return True


if __name__ == "__main__":
    main()
