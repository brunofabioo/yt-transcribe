"""
Script de Deploy para Render.com
===============================

Script para configurar e fazer deploy da API na Render.
"""

import subprocess
import sys
import os
import json
from pathlib import Path


def verificar_arquivos_render():
    """Verifica se todos os arquivos necess√°rios para Render existem"""
    print("üîç Verificando arquivos para Render...")
    
    arquivos_necessarios = [
        "main.py",
        "youtube_transcriber.py", 
        "requirements.txt",
        "render.yaml"
    ]
    
    arquivos_faltando = []
    for arquivo in arquivos_necessarios:
        if not Path(arquivo).exists():
            arquivos_faltando.append(arquivo)
    
    if arquivos_faltando:
        print(f"‚ùå Arquivos faltando: {', '.join(arquivos_faltando)}")
        return False
    
    print("‚úÖ Todos os arquivos necess√°rios encontrados!")
    return True


def verificar_requirements():
    """Verifica se o requirements.txt est√° otimizado para Render"""
    print("üì¶ Verificando requirements.txt...")
    
    try:
        with open("requirements.txt", "r") as f:
            content = f.read()
        
        # Verificar se tem as depend√™ncias essenciais
        dependencias_essenciais = [
            "fastapi",
            "uvicorn",
            "yt-dlp",
            "youtube-transcript-api",
            "openai",
            "openai-whisper"
        ]
        
        faltando = []
        for dep in dependencias_essenciais:
            if dep not in content.lower():
                faltando.append(dep)
        
        if faltando:
            print(f"‚ö†Ô∏è Depend√™ncias faltando: {', '.join(faltando)}")
            return False
        
        print("‚úÖ requirements.txt est√° correto!")
        return True
        
    except Exception as e:
        print(f"‚ùå Erro ao verificar requirements.txt: {e}")
        return False


def criar_arquivo_env_exemplo():
    """Cria arquivo .env.example para Render"""
    print("üìù Criando arquivo .env.example...")
    
    env_content = """# YouTube Video Transcriber API - Render.com
# Copie este arquivo para .env e configure suas vari√°veis

# Chave da API OpenAI (obrigat√≥ria)
OPENAI_API_KEY=your_openai_api_key_here

# Configura√ß√µes opcionais
WHISPER_MODEL_SIZE=base
LANGUAGE=pt

# Render.com configura√ß√µes
PORT=10000
"""
    
    try:
        with open(".env.example", "w") as f:
            f.write(env_content)
        print("‚úÖ Arquivo .env.example criado!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar .env.example: {e}")
        return False


def testar_api_localmente():
    """Testa se a API funciona localmente"""
    print("üß™ Testando API localmente...")
    
    try:
        # Verificar se as depend√™ncias est√£o instaladas
        import fastapi
        import uvicorn
        print("‚úÖ FastAPI e Uvicorn dispon√≠veis")
        
        # Testar importa√ß√£o da API
        from main import app
        print("‚úÖ API importada com sucesso")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå Depend√™ncias n√£o instaladas: {e}")
        print("Execute: pip install -r requirements.txt")
        return False
    except Exception as e:
        print(f"‚ùå Erro ao testar API: {e}")
        return False


def criar_instrucoes_deploy():
    """Cria arquivo com instru√ß√µes de deploy"""
    print("üìã Criando instru√ß√µes de deploy...")
    
    instrucoes = """# üöÄ Deploy na Render.com - YouTube Video Transcriber API

## üìã Pr√©-requisitos

1. **Conta na Render.com** - [Criar conta](https://render.com)
2. **Chave da API OpenAI** - [Obter aqui](https://platform.openai.com/api-keys)
3. **Reposit√≥rio no GitHub** - [brunofabioo/yt-transcribe](https://github.com/brunofabioo/yt-transcribe)

## üîß Passos para Deploy

### 1. Acesse Render.com
- V√° para [render.com](https://render.com)
- Fa√ßa login ou crie uma conta

### 2. Criar Novo Servi√ßo
- Clique em "New +"
- Selecione "Web Service"
- Conecte seu reposit√≥rio GitHub: `brunofabioo/yt-transcribe`

### 3. Configurar o Servi√ßo
- **Name**: `youtube-transcriber-api`
- **Environment**: `Python 3`
- **Region**: `Oregon (US West)`
- **Branch**: `master`
- **Root Directory**: (deixe vazio)
- **Build Command**: `pip install -r requirements.txt`
- **Start Command**: `uvicorn main:app --host 0.0.0.0 --port $PORT`

### 4. Configurar Vari√°veis de Ambiente
- **OPENAI_API_KEY**: `sua_chave_da_api_openai`
- **WHISPER_MODEL_SIZE**: `base`
- **LANGUAGE**: `pt`

### 5. Deploy
- Clique em "Create Web Service"
- Aguarde o build e deploy (5-10 minutos)

## üß™ Testar o Deploy

### Health Check
```bash
curl https://youtube-transcriber-api.onrender.com/health
```

### Testar API
```bash
curl -X POST https://youtube-transcriber-api.onrender.com/transcribe \\
  -H "Content-Type: application/json" \\
  -d '{"url": "https://www.youtube.com/watch?v=VIDEO_ID"}'
```

## üìä Monitoramento

- **Logs**: Render Dashboard > Seu Servi√ßo > Logs
- **M√©tricas**: Render Dashboard > Seu Servi√ßo > Metrics
- **Uptime**: Render Dashboard > Seu Servi√ßo > Uptime

## üîß Configura√ß√µes Avan√ßadas

### Plano Gratuito
- **Limita√ß√µes**: 750 horas/m√™s, sleep ap√≥s 15 min de inatividade
- **Recomenda√ß√£o**: Ideal para testes e desenvolvimento

### Plano Pago
- **Vantagens**: Sem sleep, mais recursos, dom√≠nio personalizado
- **Recomenda√ß√£o**: Para produ√ß√£o

## üêõ Troubleshooting

### Erro: "Chave da API OpenAI n√£o configurada"
- Verifique se a vari√°vel `OPENAI_API_KEY` est√° configurada
- Certifique-se de que n√£o h√° espa√ßos extras

### Erro: "Timeout"
- Render tem timeout de 30 segundos para requests
- Use modelo Whisper menor (`tiny` ou `base`)

### Erro: "Build failed"
- Verifique se todas as depend√™ncias est√£o no `requirements.txt`
- Verifique os logs de build na Render

## üìû Suporte

- **Render Docs**: [render.com/docs](https://render.com/docs)
- **Logs**: Render Dashboard > Logs
- **Status**: [status.render.com](https://status.render.com)

---

**Deploy realizado com ‚ù§Ô∏è por Bruno**
"""
    
    try:
        with open("RENDER_DEPLOY.md", "w", encoding="utf-8") as f:
            f.write(instrucoes)
        print("‚úÖ Instru√ß√µes de deploy criadas!")
        return True
    except Exception as e:
        print(f"‚ùå Erro ao criar instru√ß√µes: {e}")
        return False


def main():
    """Fun√ß√£o principal de prepara√ß√£o para Render"""
    print("Preparando Deploy para Render.com")
    print("=" * 50)
    
    # Verificar arquivos
    if not verificar_arquivos_render():
        print("\n‚ùå Arquivos necess√°rios n√£o encontrados!")
        return False
    
    # Verificar requirements
    if not verificar_requirements():
        print("\n‚ùå requirements.txt n√£o est√° correto!")
        return False
    
    # Criar arquivo .env.example
    criar_arquivo_env_exemplo()
    
    # Testar API localmente
    if not testar_api_localmente():
        print("\n‚ö†Ô∏è API n√£o funcionou localmente, mas continuando...")
    
    # Criar instru√ß√µes
    criar_instrucoes_deploy()
    
    print("\nüéâ Prepara√ß√£o para Render conclu√≠da!")
    print("\nüìã Pr√≥ximos passos:")
    print("1. Acesse render.com")
    print("2. Conecte o reposit√≥rio brunofabioo/yt-transcribe")
    print("3. Configure as vari√°veis de ambiente")
    print("4. Fa√ßa o deploy!")
    print("\nüìñ Instru√ß√µes detalhadas em: RENDER_DEPLOY.md")
    
    return True


if __name__ == "__main__":
    main()
