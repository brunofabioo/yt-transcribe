"""
YouTube Video Transcriber & Summarizer - App Principal
=====================================================

Aplica√ß√£o simplificada para transcrever e resumir v√≠deos do YouTube.
Vers√£o otimizada para deploy.

Uso:
    python app.py

Requisitos:
    - Chave da API OpenAI configurada
    - FFmpeg instalado
"""

from youtube_transcriber import YouTubeTranscriber
import os
import sys


def main():
    """Fun√ß√£o principal da aplica√ß√£o"""
    print("üé¨ YouTube Video Transcriber & Summarizer")
    print("=" * 50)
    
    # Verificar chave da API OpenAI
    OPENAI_API_KEY = os.getenv('OPENAI_API_KEY')
    
    if not OPENAI_API_KEY:
        print("‚ùå Chave da API OpenAI n√£o encontrada!")
        print("\nüìã Como configurar:")
        print("1. Obtenha sua chave em: https://platform.openai.com/api-keys")
        print("2. Configure a vari√°vel de ambiente:")
        print("   Windows: set OPENAI_API_KEY=sua_chave_aqui")
        print("   Linux/Mac: export OPENAI_API_KEY=sua_chave_aqui")
        print("3. Ou crie um arquivo .env com: OPENAI_API_KEY=sua_chave_aqui")
        return
    
    try:
        # Inicializar transcriber
        print("üîÑ Inicializando sistema...")
        transcriber = YouTubeTranscriber(
            openai_api_key=OPENAI_API_KEY,
            whisper_model_size="base"  # Modelo balanceado
        )
        print("‚úÖ Sistema inicializado!")
        
        # Loop principal
        while True:
            print("\n" + "="*50)
            print("üì∫ PROCESSAR V√çDEO DO YOUTUBE")
            print("="*50)
            
            # Obter URL do v√≠deo
            video_url = input("\nDigite a URL do v√≠deo (ou 'sair' para encerrar): ").strip()
            
            if video_url.lower() in ['sair', 'exit', 'quit', '']:
                print("üëã At√© logo!")
                break
            
            # Validar URL
            if 'youtube.com' not in video_url and 'youtu.be' not in video_url:
                print("‚ùå URL inv√°lida! Use uma URL do YouTube.")
                continue
            
            # Processar v√≠deo
            print(f"\nüöÄ Processando v√≠deo...")
            print(f"URL: {video_url}")
            
            try:
                results = transcriber.process_video(video_url)
                
                if results["success"]:
                    print("\n‚úÖ Processamento conclu√≠do com sucesso!")
                    
                    # Exibir resumo
                    print("\n" + "="*60)
                    print("üìÑ RESUMO:")
                    print("="*60)
                    print(results["summary"])
                    
                    # Salvar resultados
                    output_file = f"resultado_{results['video_id']}.txt"
                    transcriber.save_results(results, output_file)
                    
                    # Perguntar se quer ver transcri√ß√£o completa
                    ver_transcricao = input("\nVer transcri√ß√£o completa? (s/N): ").strip().lower()
                    if ver_transcricao in ['s', 'sim', 'y', 'yes']:
                        print("\n" + "="*60)
                        print("üìù TRANSCRI√á√ÉO COMPLETA:")
                        print("="*60)
                        print(results["transcript"])
                    
                else:
                    print(f"\n‚ùå Erro: {results.get('error', 'Erro desconhecido')}")
                    
            except KeyboardInterrupt:
                print("\n\n‚ö†Ô∏è Opera√ß√£o cancelada pelo usu√°rio.")
                break
            except Exception as e:
                print(f"\n‚ùå Erro inesperado: {e}")
            
            # Perguntar se quer processar outro v√≠deo
            continuar = input("\nProcessar outro v√≠deo? (S/n): ").strip().lower()
            if continuar in ['n', 'n√£o', 'no']:
                print("üëã At√© logo!")
                break
    
    except KeyboardInterrupt:
        print("\n\nüëã Aplica√ß√£o encerrada pelo usu√°rio.")
    except Exception as e:
        print(f"\n‚ùå Erro fatal: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
